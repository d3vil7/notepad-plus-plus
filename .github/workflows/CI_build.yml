name: CI_build

on:
  workflow_dispatch:
  
env:
  PYTHON_ALLOW_CACHE: true
  PYTHON_DIR_CACHE: D:\.cache\python

jobs:
  before_build:

    runs-on: windows-latest
    outputs:
      result: ${{ steps.filter.outputs.result }}
      matrix: ${{ steps.filter.outputs.matrix }}
      title: ${{ steps.filter.outputs.title }}
      python: ${{ steps.filter.outputs.python }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

    - name: Commit filtering
      id: filter
      run: |
        $allowMaster = $true
        $folders_onejob = "PowerEditor/(Test|(installer/(filesForTesting|functionList)))/"
        $folders_nowork = "\.github/ISSUE_TEMPLATE"
        $files_nowork = "md|txt|log|ini"
        $files_needwork = "CMakeLists\.txt"

        $matrix_all = 'matrix={"build_configuration": ["Release"], "build_platform": ["x64"]}'
        $matrix_onejob = 'matrix={"build_configuration": ["Debug"], "build_platform": ["Win32"]}'
        Write-Output $matrix_all >> $env:GITHUB_OUTPUT

        $isPush = "${{github.event_name }}" -eq "push" ? $true : $false
        $isMaster = $isPush -and $${{ github.ref_name == github.event.repository.master_branch }}

        $commit_message = $isPush ? (git show -s --format=%B) : (git log -1 --no-merges --pretty=%B)
        $commit_title = ($commit_message -split "[\r\n]+")[0]
        Write-Output "title=$commit_title" >> $env:GITHUB_OUTPUT
        $files_modified = @(git diff --name-only HEAD~1)
        $files_needwork_all = @($files_modified | Where-Object {$_ -notmatch "\.(xml|$files_nowork)$|$folders_nowork|$folders_onejob" -or $_ -match "($files_needwork)$"})

        if ($allowMaster -or !$isMaster) {
            if ($commit_title -match "\[force all\]") {
              Write-Output "Run standard jobs"
            }
            elseif ($commit_title -match "\[force one\]") {
              Write-Output "Run only one Win32/Debug job"
              Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
              Write-Output $matrix_onejob >> $env:GITHUB_OUTPUT
            }
            elseif (($files_modified.length -gt 0 -and $files_needwork_all.length -eq 0) -or $commit_title -match "\[force (xml|none)\]") {
                if (@($files_modified | Where-Object {$_ -notmatch "\.($files_nowork)$|$folders_nowork"}).length -eq 0 -or $commit_title -match "\[force none\]") {
                    Write-Output "Changed files on this commit don't require any additional tasks.`n"
                    Write-Output "result=OK" >> $env:GITHUB_OUTPUT
                    Write-Output "PYTHON_ALLOW_CACHE=false" >> $env:GITHUB_ENV
                    Exit
                }
                else {
                    Write-Output "Run only XML validation step"
                    if (@($files_modified | Where-Object {$_ -match $folders_onejob}).length -eq 0) {
                        Write-Output "result=XML" >> $env:GITHUB_OUTPUT
                    }
                    else {
                      Write-Output "Run only one Win32/Debug job"
                      Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
                      Write-Output $matrix_onejob >> $env:GITHUB_OUTPUT
                    }

                }
            }
            else {
              Write-Output "Run standard jobs"
            }
        }
        else {
          Write-Output "Run standard jobs"
        }

        if ($commit_title -match "\[force nopythoncache\]") {
          $env:PYTHON_ALLOW_CACHE = "false"
          Write-Output "PYTHON_ALLOW_CACHE=false" >> $env:GITHUB_ENV
        }
        if ($Env:PYTHON_ALLOW_CACHE -eq "true") {
          $python = ((python -V) -split " ")[1]
          $requests = (Invoke-RestMethod https://pypi.org/pypi/requests/json).info.version
          $rfc3987 = (Invoke-RestMethod https://pypi.org/pypi/rfc3987/json).info.version
          $pywin32 = (Invoke-RestMethod https://pypi.org/pypi/pywin32/json).info.version
          $lxml = (Invoke-RestMethod https://pypi.org/pypi/lxml/json).info.version
          $key = "${{ runner.os }}-python_$python-requests_$requests-rfc3987_$rfc3987-pywin32_$pywin32-lxml_$lxml"
          Write-Output "python=$key" >> $env:GITHUB_OUTPUT
        }

    - name: (cache) Lookup Python modules
      if: env.PYTHON_ALLOW_CACHE == 'true'
      uses: actions/cache/restore@v4
      id: cache-lookup
      with:
        path: ${{ env.PYTHON_DIR_CACHE }}
        key: ${{ steps.filter.outputs.python }}
        lookup-only: true

    - name: (cache) Restore Python modules
      if: env.PYTHON_ALLOW_CACHE == 'true' && steps.filter.outputs.result == 'XML' && steps.cache-lookup.outputs.cache-hit == 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.PYTHON_DIR_CACHE }}
        key: ${{ steps.filter.outputs.python }}

    - name: (cache) Install Python modules
      if: env.PYTHON_ALLOW_CACHE == 'true' && steps.cache-lookup.outputs.cache-hit != 'true'
      run: |
        python -m pip install --target ${{ env.PYTHON_DIR_CACHE }} requests rfc3987 pywin32 lxml

    - name: (cache) Save Python modules
      if: env.PYTHON_ALLOW_CACHE == 'true' && steps.cache-lookup.outputs.cache-hit != 'true' && github.event_name == 'push'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.PYTHON_DIR_CACHE }}
        key: ${{ steps.filter.outputs.python }}

    - name: XML validation
      if: steps.filter.outputs.result == 'XML'
      run: |
        if ($Env:PYTHON_ALLOW_CACHE -eq "true" -and (Test-Path -Path ${{ env.PYTHON_DIR_CACHE }})) {
          $Env:PYTHONPATH = "${{ env.PYTHON_DIR_CACHE }}"
        }
        else {
          python -m pip install requests rfc3987 pywin32 lxml
        }
        python PowerEditor\Test\xmlValidator\validator_xml.py
        if ($LastExitCode -eq 0) {
            Write-Output "`nAll XML files are valid.`n"

        }
        else {
            Write-Output "`nSome XML files are invalid.`n"
            $host.SetShouldExit($LastExitCode)
        }

  build_windows:

    runs-on: windows-latest
    needs: before_build
    if: needs.before_build.outputs.result == '' || needs.before_build.outputs.result == 'ONEJOB'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.before_build.outputs.matrix) }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Modify resource.h N++ version to avoid confusion
      working-directory: PowerEditor\src\
      run: |
           $content = Get-Content -Path 'resource.h'
           $newContent = $content -replace 'TEXT\(\"Notepad\+\+ v.*\"\)', 'TEXT("Notepad++ GH_BUILD")'
           $newContent | Set-Content -Path 'resource.h'

    - name: MSBuild of n++ exe
      working-directory: PowerEditor\visual.net\
      run: msbuild notepadPlus.sln /m /p:configuration="Release" /p:platform="x64" /p:PlatformToolset="v143"

    - name: Archive artifacts for x64 / Release
      if: matrix.build_platform == 'x64' && matrix.build_configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
          name: Notepad++.MSVC.${{ matrix.build_platform}}.${{ matrix.build_configuration}}
          path: build/release

  # build_windows_clang:

    # runs-on: windows-latest
    #needs: before_build
    #if: needs.before_build.outputs.result == ''
    # strategy:
      # matrix:
        # build_configuration: [Release]
        # build_platform: [x64]

    # steps:
    # - name: Checkout repo
      # uses: actions/checkout@v4

    # - name: Add msbuild to PATH
      # uses: microsoft/setup-msbuild@v2

    # - name: Modify resource.h N++ version to avoid confusion
      # working-directory: PowerEditor\src\
      # run: |
           # $content = Get-Content -Path 'resource.h'
           # $newContent = $content -replace 'TEXT\(\"Notepad\+\+ v.*\"\)', 'TEXT("Notepad++ GH_BUILD")'
           # $newContent | Set-Content -Path 'resource.h'

    # - name: MSBuild of n++ exe
      # working-directory: PowerEditor\visual.net\
      # run: msbuild notepadPlus.sln /m /p:configuration="${{ matrix.build_configuration }}" /p:platform="${{ matrix.build_platform }}" /p:PlatformToolset="ClangCL"
